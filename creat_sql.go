package gfadapter

import (
	"fmt"
	"strings"
)

const (
	CreateTableSQLMySQL = `
CREATE TABLE %s (
    id    BIGINT AUTO_INCREMENT PRIMARY KEY,
    ptype VARCHAR(100) DEFAULT '' NOT NULL,
    v0    VARCHAR(100) DEFAULT '' NOT NULL,
    v1    VARCHAR(100) DEFAULT '' NOT NULL,
    v2    VARCHAR(100) DEFAULT '' NOT NULL,
    v3    VARCHAR(100) DEFAULT '' NOT NULL,
    v4    VARCHAR(100) DEFAULT '' NOT NULL,
    v5    VARCHAR(100) DEFAULT '' NOT NULL,
    INDEX idx_ptype (ptype),
    INDEX idx_v0 (v0),
    INDEX idx_v1 (v1),
    INDEX idx_v2 (v2),
    INDEX idx_v3 (v3),
    INDEX idx_v4 (v4),
    INDEX idx_v5 (v5)
) COMMENT 'Casbin rule table';`

	CreateTableSQLPostgreSQL = `
CREATE TABLE %s (
    id    BIGSERIAL PRIMARY KEY,
    ptype VARCHAR(100) DEFAULT '' NOT NULL,
    v0    VARCHAR(100) DEFAULT '' NOT NULL,
    v1    VARCHAR(100) DEFAULT '' NOT NULL,
    v2    VARCHAR(100) DEFAULT '' NOT NULL,
    v3    VARCHAR(100) DEFAULT '' NOT NULL,
    v4    VARCHAR(100) DEFAULT '' NOT NULL,
    v5    VARCHAR(100) DEFAULT '' NOT NULL
);
CREATE INDEX %s_idx_ptype ON %s (ptype);
CREATE INDEX %s_idx_v0 ON %s (v0);
CREATE INDEX %s_idx_v1 ON %s (v1);
CREATE INDEX %s_idx_v2 ON %s (v2);
CREATE INDEX %s_idx_v3 ON %s (v3);
CREATE INDEX %s_idx_v4 ON %s (v4);
CREATE INDEX %s_idx_v5 ON %s (v5);`

	CreateTableSQLSQLite = `
CREATE TABLE %s (
    id    INTEGER PRIMARY KEY AUTOINCREMENT,
    ptype TEXT DEFAULT '' NOT NULL,
    v0    TEXT DEFAULT '' NOT NULL,
    v1    TEXT DEFAULT '' NOT NULL,
    v2    TEXT DEFAULT '' NOT NULL,
    v3    TEXT DEFAULT '' NOT NULL,
    v4    TEXT DEFAULT '' NOT NULL,
    v5    TEXT DEFAULT '' NOT NULL
);
CREATE INDEX %s_idx_ptype ON %s (ptype);
CREATE INDEX %s_idx_v0 ON %s (v0);
CREATE INDEX %s_idx_v1 ON %s (v1);
CREATE INDEX %s_idx_v2 ON %s (v2);
CREATE INDEX %s_idx_v3 ON %s (v3);
CREATE INDEX %s_idx_v4 ON %s (v4);
CREATE INDEX %s_idx_v5 ON %s (v5);`

	CreateTableSQLSQLServer = `
CREATE TABLE %s (
    id    BIGINT IDENTITY(1,1) PRIMARY KEY,
    ptype NVARCHAR(100) DEFAULT '' NOT NULL,
    v0    NVARCHAR(100) DEFAULT '' NOT NULL,
    v1    NVARCHAR(100) DEFAULT '' NOT NULL,
    v2    NVARCHAR(100) DEFAULT '' NOT NULL,
    v3    NVARCHAR(100) DEFAULT '' NOT NULL,
    v4    NVARCHAR(100) DEFAULT '' NOT NULL,
    v5    NVARCHAR(100) DEFAULT '' NOT NULL
);
CREATE INDEX %s_idx_ptype ON %s (ptype);
CREATE INDEX %s_idx_v0 ON %s (v0);
CREATE INDEX %s_idx_v1 ON %s (v1);
CREATE INDEX %s_idx_v2 ON %s (v2);
CREATE INDEX %s_idx_v3 ON %s (v3);
CREATE INDEX %s_idx_v4 ON %s (v4);
CREATE INDEX %s_idx_v5 ON %s (v5);`

	CreateTableSQLOracle = `
CREATE TABLE %s (
    id    NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ptype VARCHAR2(100) DEFAULT '' NOT NULL,
    v0    VARCHAR2(100) DEFAULT '' NOT NULL,
    v1    VARCHAR2(100) DEFAULT '' NOT NULL,
    v2    VARCHAR2(100) DEFAULT '' NOT NULL,
    v3    VARCHAR2(100) DEFAULT '' NOT NULL,
    v4    VARCHAR2(100) DEFAULT '' NOT NULL,
    v5    VARCHAR2(100) DEFAULT '' NOT NULL
);
CREATE INDEX %s_idx_ptype ON %s (ptype);
CREATE INDEX %s_idx_v0 ON %s (v0);
CREATE INDEX %s_idx_v1 ON %s (v1);
CREATE INDEX %s_idx_v2 ON %s (v2);
CREATE INDEX %s_idx_v3 ON %s (v3);
CREATE INDEX %s_idx_v4 ON %s (v4);
CREATE INDEX %s_idx_v5 ON %s (v5);`

	CreateTableSQLClickHouse = `
CREATE TABLE %s (
    id    UInt64,
    ptype String DEFAULT '',
    v0    String DEFAULT '',
    v1    String DEFAULT '',
    v2    String DEFAULT '',
    v3    String DEFAULT '',
    v4    String DEFAULT '',
    v5    String DEFAULT ''
) ENGINE = MergeTree()
ORDER BY id;`

	CreateTableSQLDM = `
CREATE TABLE %s (
    id    BIGINT IDENTITY(1,1) PRIMARY KEY,
    ptype VARCHAR(100) DEFAULT '' NOT NULL,
    v0    VARCHAR(100) DEFAULT '' NOT NULL,
    v1    VARCHAR(100) DEFAULT '' NOT NULL,
    v2    VARCHAR(100) DEFAULT '' NOT NULL,
    v3    VARCHAR(100) DEFAULT '' NOT NULL,
    v4    VARCHAR(100) DEFAULT '' NOT NULL,
    v5    VARCHAR(100) DEFAULT '' NOT NULL
);
CREATE INDEX %s_idx_ptype ON %s (ptype);
CREATE INDEX %s_idx_v0 ON %s (v0);
CREATE INDEX %s_idx_v1 ON %s (v1);
CREATE INDEX %s_idx_v2 ON %s (v2);
CREATE INDEX %s_idx_v3 ON %s (v3);
CREATE INDEX %s_idx_v4 ON %s (v4);
CREATE INDEX %s_idx_v5 ON %s (v5);`

	CreateTableSQLMariaDB = CreateTableSQLMySQL

	CreateTableSQLMSSQL = CreateTableSQLSQLServer

	CreateTableSQLSQLite3 = CreateTableSQLSQLite

	CreateTableSQLTiDB = CreateTableSQLMySQL
)

func FillSQLTemplate(sqlTemplate string, tableName string) string {
	placeholderCount := strings.Count(sqlTemplate, "%s")

	args := make([]interface{}, placeholderCount)
	for i := 0; i < placeholderCount; i++ {
		args[i] = tableName
	}

	return fmt.Sprintf(sqlTemplate, args...)
}

func GetCreateTableSQLByTemplate(dbType string, tableName string) string {
	var sqlTemplate string

	switch dbType {
	case "mysql":
		sqlTemplate = CreateTableSQLMySQL
	case "mariadb":
		sqlTemplate = CreateTableSQLMariaDB
	case "pgsql":
		sqlTemplate = CreateTableSQLPostgreSQL
	case "sqlite":
		sqlTemplate = CreateTableSQLSQLite
	case "sqlite3":
		sqlTemplate = CreateTableSQLSQLite3
	case "sqlserver":
		sqlTemplate = CreateTableSQLSQLServer
	case "mssql":
		sqlTemplate = CreateTableSQLMSSQL
	case "oracle":
		sqlTemplate = CreateTableSQLOracle
	case "clickhouse":
		sqlTemplate = CreateTableSQLClickHouse
	case "dm":
		sqlTemplate = CreateTableSQLDM
	case "tidb":
		sqlTemplate = CreateTableSQLTiDB
	default:
		return ""
	}

	return FillSQLTemplate(sqlTemplate, tableName)
}
